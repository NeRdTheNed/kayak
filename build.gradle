plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'net.minecrell.licenser' version '0.4.1'
}

import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import com.google.gson.JsonParser

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

if (isNullOrEmpty(System.getenv("TRAVIS_TAG")) && !isNullOrEmpty(System.getenv('TRAVIS_BUILD_NUMBER'))) {
    version = project.modVersion + '.' + System.getenv('TRAVIS_BUILD_NUMBER')
} else {
    version = project.modVersion
}
logger.lifecycle("${project.repoName} version ${project.version}")
group = project.mavenGroup

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings "net.fabricmc:yarn:${project.yarnMappings}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.loaderVersion}+${project.loaderBuild}"

    modCompile "net.fabricmc.fabric-api:fabric-api:${project.apiVersion}"

    compileOnly "org.checkerframework:checker-qual:2.11.0"
    annotationProcessor 'net.fabricmc:fabric-mixin-compile-extensions:0.2.0.+'
}

sourceSets {
    code {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += configurations.minecraftNamed
        runtimeClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += configurations.minecraftNamed
    }
    data {
        compileClasspath += sourceSets.code.compileClasspath
        compileClasspath += sourceSets.code.output
        runtimeClasspath += sourceSets.code.compileClasspath
        runtimeClasspath += sourceSets.code.output
    }
    main {
        compileClasspath += sourceSets.code.compileClasspath
        compileClasspath += sourceSets.code.output
        runtimeClasspath += sourceSets.code.compileClasspath
        runtimeClasspath += sourceSets.code.output
    }
}

license {
    header = file('HEADER.txt')
    include '**/*.java'
    style.java = 'BLOCK_COMMENT'
    newLine = false
}

def refmaps = new ArrayList<String>()
def mergedRefmap = file("$buildDir/mergeRefmaps/$project.minecraft.refmapName")

task mergeRefmaps() {
    outputs.file mergedRefmap
    doLast {
        def result = new JsonObject()
        for (def fileName : refmaps) {
            def file = project.file(fileName)
            if (file.exists()) {
                merge(result, new JsonParser().parse(file.text).getAsJsonObject())
            }
        }
        mergedRefmap.text = new GsonBuilder().setPrettyPrinting().create().toJson(result)
    }
}

tasks.withType(JavaCompile) {
    tasks.mergeRefmaps.dependsOn it
    options.encoding = "UTF-8"
    options.annotationProcessorPath += configurations.annotationProcessor
    doFirst {
        project.minecraft {
            def refmap = new File(destinationDir, refmapName).canonicalPath
            refmaps.add refmap
        }
    }
}

tasks.withType(Javadoc) {
    options {
        source = "8"
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        memberLevel = JavadocMemberLevel.PACKAGE
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption('Xdoclint:none', '-quiet')
    }
}

def dataDir = file("$buildDir/datadump/")
def dataCacheDir = file("$dataDir/.cache/")
def outputDirectory = file("$buildDir/pom-properties")
def pomProperties = file("$outputDirectory/pom.properties")

task generatePomPropertiesForJar {
    outputDirectory.mkdirs()
    pomProperties.text = """# Generated by Gradle ${gradle.gradleVersion} on ${new Date()}
groupId=${project.group}
artifactId=${project.name}
version=${project.version}
"""
    outputs.file(pomProperties)
}

task generateData(type: JavaExec) {
    doFirst {
        dataDir.mkdirs()
    }

    classpath = sourceSets.data.runtimeClasspath

    main = project.dataEntry

    // arguments to pass to the application

    workingDir dataDir
    inputs.files sourceSets.data.output
    outputs.dir dataDir
    args dataDir.getAbsolutePath()

    doLast {
        dataCacheDir.delete()
    }
}

processResources {

	//TODO: Figure out if something needs to be done about this.
	//https://docs.gradle.org/6.7-rc-4/userguide/upgrading_version_5.html#implicit_duplicate_strategy_for_copy_or_archive_tasks_has_been_deprecated
    duplicatesStrategy = DuplicatesStrategy.WARN

    from(generateData.outputs.files) {
        include "/data/"
        include "/assets/"
    }

    inputs.properties "version": project.version, "description": project.description

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        include "pack.mcmeta"
        expand(
                "version": project.version,
                "description": project.description,
                "repoOwner": project.repoOwner,
                "repoName": project.repoName,
                "id": project.modId,
                "minecraftVersion": project.semanticMinecraftVersion,
                "loaderVersion": project.loaderVersion
        )
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
        exclude "pack.mcmeta"
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "sources"
    from sourceSets.code.allSource
    from "LICENSE"
}

javadoc {
    source = sourceSets.code.allJava
    classpath = sourceSets.code.compileClasspath

    options {
        if (file("readme.html").exists()) {
            overview = "readme.html"
        }
        links(
                'https://guava.dev/releases/21.0/api/docs/',
                'https://asm.ow2.io/javadoc/',
                'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/',
                'https://docs.oracle.com/javase/8/docs/api/'
                // Need to add minecraft jd publication once there is one available
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set "javadoc"
    from javadoc.destinationDir
}

jar {

	//TODO: Figure out if something needs to be done about this.
	//https://docs.gradle.org/6.7-rc-4/userguide/upgrading_version_5.html#implicit_duplicate_strategy_for_copy_or_archive_tasks_has_been_deprecated
    duplicatesStrategy = DuplicatesStrategy.WARN

    from(mergeRefmaps.outputs.files) {
        include project.minecraft.refmapName
    }
    from(sourceSets.code.output) {
        exclude project.minecraft.refmapName
    }

    dependsOn generateData
    from "LICENSE"
}

afterEvaluate {
    artifacts {
        archives remapJar
        archives(sourcesJar) {
            classifier = "sources"
            builtBy remapSourcesJar
        }
        archives javadocJar
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
    publish = true
    override = true
    publications = ['mavenJava']
    pkg {
        repo = project.bintrayRepo
        name = project.name
        user = bintray.user
        userOrg = project.repoOwner
        licenses = [project.codeLicense]
        desc = project.description
        websiteUrl = "https://github.com/${project.repoOwner}/${project.repoName}"
        issueTrackerUrl = "https://github.com/${project.repoOwner}/${project.repoName}/issues"
        vcsUrl = "https://github.com/${project.repoOwner}/${project.repoName}.git"
        publicDownloadNumbers = true

        githubRepo = "${project.repoOwner}/${project.repoName}"
        version {
            name = project.version
            released = new Date()
            if (!isNullOrEmpty(System.getenv("TRAVIS_TAG"))) {
                vcsTag = System.getenv("TRAVIS_TAG")
            } else {
                vcsTag = ''
            }
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = project.name
                description = project.description
                url = "https://github.com/${project.repoOwner}/${project.repoName}"
                licenses {
                    license {
                        name = project.codeLicense
                    }
                }

                scm {
                    url = "https://github.com/${project.repoOwner}/${project.repoName}"
                }
            }

            // add all the jars that should be included when publishing to maven
            afterEvaluate {
                artifact remapJar
                artifact(sourcesJar) {
                    classifier = "sources"
                    builtBy remapSourcesJar
                }
                artifact javadocJar
            }
        }
    }

    if (!isNullOrEmpty(System.getenv('GITHUB_OAUTH_TOKEN'))) {
        publications {
            mavenGitHub(MavenPublication) {
                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/${project.repoOwner}/${project.repoName}"
                    licenses {
                        license {
                            name = project.codeLicense
                        }
                    }

                    scm {
                        url = "https://github.com/${project.repoOwner}/${project.repoName}"
                    }
                }

                // add all the jars that should be included when publishing to maven
                artifact remapJar
                artifact(sourcesJar) {
                    classifier = "sources"
                    builtBy remapSourcesJar
                }
                artifact javadocJar
            }
        }
        // select the repositories you want to publish to
        repositories {
            maven {
                name = "GitHub"
                url = uri("https://maven.pkg.github.com/${project.repoOwner}/${project.repoName}")
                credentials {
                    username = "${project.githubPackagePublisher}"
                    password = System.getenv('GITHUB_OAUTH_TOKEN')
                }
            }
        }
		// uncomment to publish to the local maven
		// mavenLocal()
    }
}

tasks.withType(Jar) {
    dependsOn("generatePomFileForMavenJavaPublication", "generatePomPropertiesForJar")
    into("META-INF/maven/${project.group}/${project.name}") {
        from(generatePomFileForMavenJavaPublication) {
            rename(".+", "pom.xml")
        }
        from(generatePomPropertiesForJar)
    }
}

static boolean isNullOrEmpty(String st) {
    return st == null || st.isEmpty()
}

static void merge(JsonObject base, JsonObject head) {
    for (def entry : head.entrySet()) {
        if (base.has(entry.key)) {
            def oneElement = base.get(entry.key)
            if (oneElement != entry.value) {
                if (oneElement.isJsonArray() && entry.value.isJsonArray()) {
                    oneElement.getAsJsonArray().addAll(entry.value.getAsJsonArray())
                } else if (oneElement.isJsonObject() && entry.value.isJsonObject()) {
                    merge(oneElement.getAsJsonObject(), entry.value.getAsJsonObject())
                } else {
                    throw new UnsupportedOperationException("Conflicting key " + entry.key + " in json " + base + " and " + head)
                }
            }
            // merge
        } else {
            base.add(entry.key, entry.value)
        }
    }
}
